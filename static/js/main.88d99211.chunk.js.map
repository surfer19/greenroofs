{"version":3,"sources":["assets/images/heatmap.jpg","map/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","center","bbOneBounds","bbTwoBounds","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","axios","get","then","response","console","log","data","setState","allBuildings","catch","error","bbOneBuildings","bbTwoBuildings","bbOneCatBuildings","bbTwoCatBuildings","feature","layer","properties","labelContent","bindPopup","closeButton","on","openPopup","closePopup","react_default","a","createElement","es_Map","zoom","attributionControl","zoomControl","TileLayer","url","LayersControl","position","Overlay","name","GeoJSON","key","hash","Math","random","onEachFeature","LayerGroup","style","weight","opacity","color","dashArray","Rectangle","bounds","fillColor","fillOpacity","ImageOverlay","heatmapImg","React","Component","App","className","src_map_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88d99211.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heatmap.dc9cf7d9.jpg\";","\nimport React from 'react';\nimport { Map as LeafletMap, TileLayer, ImageOverlay,GeoJSON, LayersControl, Marker, Popup, FeatureGroup, Circle, LayerGroup, latLngBounds, Rectangle }  from 'react-leaflet';\nimport './Map.css';\nimport heatmapImg from '../assets/images/heatmap.jpg';\nimport axios from 'axios';\nimport hash from 'object-hash';\n\nconst center = [50.086385, 14.423693]\nconst bbOneBounds = [[50.090759 ,14.428063], [50.087322, 14.437146]]\nconst bbTwoBounds = [[50.086436 ,14.424331], [50.0795, 14.432383]]\n\n// [14.424331, 50.086436, 14.432383,50.081072]\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);        \n    }\n    state = { }\n    \n    componentDidMount() {\n        axios.get('terrierObjects/bb_center_green_roofs.geojson') // JSON File Path\n            .then(response => {\n                console.log('respones', response.data)\n                this.setState({\n                    allBuildings: response.data\n                });\n            })            \n            .catch(function (error) {\n                console.log(error);\n        });\n        axios.get('terrierObjects/bb1_green_roofs.geojson')\n            .then(response => {\n                console.log('respones', response.data)\n                this.setState({\n                    // bounding box one\n                    bbOneBuildings: response.data\n                });\n            })            \n            .catch(function (error) {\n                console.log(error);\n        });\n        axios.get('terrierObjects/bb2_green_roofs.geojson')\n            .then(response => {\n                console.log('respones', response.data)\n                this.setState({\n                    // bounding box one\n                    bbTwoBuildings: response.data\n                });\n            })            \n            .catch(function (error) {\n                console.log(error);\n        });\n        axios.get('terrierObjects/bb1_cat_green_roofs.geojson')\n            .then(response => {\n                console.log('respones', response.data)\n                this.setState({\n                    // bounding box one\n                    bbOneCatBuildings: response.data\n                });\n            })            \n            .catch(function (error) {\n                console.log(error);\n        });\n        axios.get('terrierObjects/bb2_cat_green_roofs.geojson')\n            .then(response => {\n                console.log('respones', response.data)\n                this.setState({\n                    // bounding box one\n                    bbTwoCatBuildings: response.data\n                });\n            })            \n            .catch(function (error) {\n                console.log(error);\n        });\n    }\n\n    onEachFeature(feature, layer) {        \n        if (feature.properties) { // && feature.properties.name) {\n            let labelContent ='Building is in critical area.'\n            // layer.bindPopup('building in first critical area');\n            if (feature.properties['Kategorie I']) {\n                if (feature.properties['Kategorie II']) {\n                    labelContent = '[LEVEL 1 and 2] Building is very suitable for green roof.'\n                }\n                else {\n                    labelContent = '[LEVEL 1] Building is very suitable for green roof.'\n                }\n            }\n            else if(feature.properties['Kategorie II']) {\n                labelContent = '[LEVEL 2] Building is very suitable for green roof.'\n            } \n            else { \n                labelContent = '[LEVEL 3/4] Building is in critical area.'\n            }\n\n            layer.bindPopup(labelContent, {closeButton: false});\n            layer.on('mouseover', function() { layer.openPopup(); });\n            layer.on('mouseout', function() { layer.closePopup(); });\n        }        \n    }\n\n    render() {        \n        return (\n            <div>\n            <LeafletMap\n                center={center}\n                zoom={15}            \n                attributionControl={true}\n                zoomControl={true}\n                >\n                <TileLayer url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'></TileLayer>\n                \n                <LayersControl position=\"topright\">                          \n                    <LayersControl.Overlay name=\"Show all possible buildings\">\n                        { this.state && this.state.allBuildings &&\n                        <GeoJSON key={hash({a: Math.random() * 10})} data={this.state ? this.state.allBuildings : null} \n                            onEachFeature={this.onEachFeature}/>\n                        }\n                    </LayersControl.Overlay>\n\n                    <LayersControl.Overlay name=\"Show buildings in first critical area\">\n                        <LayerGroup>\n                            { this.state && this.state.allBuildings &&\n                            <GeoJSON key={hash({a: Math.random() * 10})} data={this.state ? this.state.bbOneBuildings : null} \n                                style= {                        \n                                    {                                                                                \n                                        weight: 2,                                        \n                                        opacity: 1,\n                                        color: 'yellow',\n                                        dashArray: '5',                                        \n                                    }\n                                }\n                                onEachFeature={this.onEachFeature}\n                                />\n                            }\n                            <Rectangle bounds={bbOneBounds} color=\"blue\"/>\n                            {/* <Rectangle bounds={bbOneBounds} color=\"blue\" style ={{ dashArray: '4'}}/> */}\n                        </LayerGroup>\n                    </LayersControl.Overlay>\n\n                    <LayersControl.Overlay name=\"Show buildings in second critical area\">\n                        <LayerGroup>\n                            { this.state && this.state.allBuildings &&\n                            <GeoJSON key={hash({a: Math.random() * 10})} data={this.state ? this.state.bbTwoBuildings : null} \n                                style= {                        \n                                    {                                        \n                                        fillColor: 'black',\n                                        weight: 2,\n                                        //stroke-width: to have a constant width on the screen need to adapt with scale \n                                        opacity: 1,\n                                        color: 'black',\n                                        dashArray: '5',                                         \n                                    }\n                                }\n                                onEachFeature={this.onEachFeature}\n                                />\n                            }\n                            <Rectangle bounds={bbTwoBounds} color=\"purple\"/>\n                        </LayerGroup>\n\n                    </LayersControl.Overlay>\n\n                    <LayersControl.Overlay name=\"Show only 1. and 2. level buildings in first critical area\">\n                        <LayerGroup>\n                            { this.state && this.state.allBuildings &&\n                                <GeoJSON key={hash({a: Math.random() * 10})} data={this.state ? this.state.bbOneCatBuildings : null} \n                                style= {                        \n                                    {   \n                                        fillColor: 'blue',                                      \n                                        fillOpacity: 0.7,\n                                        weight: 2,                                        \n                                        opacity: 1,\n                                        color: 'blue',                                    \n                                    }\n                                }\n                                onEachFeature={this.onEachFeature}\n                                />\n                            }\n                            <Rectangle bounds={bbOneBounds} color=\"blue\"/>\n                        </LayerGroup>\n                    </LayersControl.Overlay>\n\n                    <LayersControl.Overlay name=\"Show only 1. and 2. level buildings in second critical area\">\n                        <LayerGroup>\n                            { this.state && this.state.allBuildings &&\n                                <GeoJSON key={hash({a: Math.random() * 10})} data={this.state ? this.state.bbTwoCatBuildings : null} style={                                                     \n                                    {\n                                        fillOpacity: 0.7,\n                                        weight: 2,                               \n                                        opacity: 1,\n                                        color: 'black',\n                                    }\n                                } \n                                onEachFeature={this.onEachFeature}\n                                />\n                            }\n                            <Rectangle bounds={bbTwoBounds} color=\"purple\"/>\n                        </LayerGroup>\n                    </LayersControl.Overlay>        \n                    \n                    <LayersControl.Overlay name=\"Show heatmap\">\n                        <ImageOverlay url={heatmapImg} \n                                        bounds={[[49.91156 ,13.90904], [50.2512, 14.89781]]}                                        \n                                        opacity=\"0.85\">\n                        </ImageOverlay>                        \n                    </LayersControl.Overlay>\n\n                </LayersControl>\n            </LeafletMap>     \n            </div>\n            // <div></div>\n        )\n    }\n}\n\nexport default Map;","import React, { Component } from 'react';\nimport Map from './map/Map';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\"> */}        \n        <Map/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}